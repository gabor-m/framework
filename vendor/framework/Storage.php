<?phpnamespace app\framework;class Storage {	private static function create_path($hash) {		return "storage/" . substr($hash, 0, 2) . "/" . substr($hash, 2, 2) . "/" . $hash . ".blob";	}		private static function create_dirs($hash) {		$first_dir = "storage/" . substr($hash, 0, 2);		$second_dir = $first_dir . "/" . substr($hash, 2, 2);		if (!file_exists($first_dir)) {			mkdir($first_dir);		}		if (!file_exists($second_dir)) {			mkdir($second_dir);		}	}		public static function path($hash) {		$path = self::create_path($hash);		if (!file_exists($path) || sha1_file($path) !== $hash) {			return null;		}		return $path;	}		public static function addString($content) {		$hash = sha1($content);		if (self::has($hash)) {			return $hash;		}		self::create_dirs($hash);		$path = self::create_path($hash);		file_put_contents($path, $content);		return $hash;	}		private static function addFromUrl($path) {		$temp_file = "storage/" . bin2hex(random_bytes(16)) . ".download";		file_put_contents($temp_file, fopen($path, 'r'));		$hash = self::addFile($temp_file);		unlink($temp_file);		return $hash;	}		private static function addFile($path) {		$hash = sha1_file($path);		$storage_path = self::path($hash);		if ($storage_path) {			return $hash;		}		self::create_dirs($hash);		$storage_path = self::create_path($hash);		copy($path, $storage_path);			return $hash;	}		public static function add($path) {		if (!!preg_match("/^(http:|https:)/", $path)) {			return self::addFromUrl($path);		} else if (file_exists($path)) {			return self::addFile($path);		}		return null;	}		public static function get($hash) {		$path = self::path($hash);		if (!$path) {			return null;		}		return file_get_contents($path);	}		public static function has($hash) {		return !!self::path($hash);	}		public static function remove($hash) {		$path = self::create_path($hash);		if (file_exists($path)) {			unlink($path);		}	}}